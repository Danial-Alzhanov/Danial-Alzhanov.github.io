import time
import random
import threading

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users = {}
session_user = None
cards = {}
notes = {}

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥
def is_valid_password(pw):
    return len(pw) >= 5 and pw.isalnum()

def register():
    global users
    username = input("\n–ü—Ä–∏–¥—É–º–∞–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    if username in users:
        print("–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        return
    password = input("–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 5 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã): ")
    if not is_valid_password(password):
        print("–ü–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.")
        return
    users[username] = password
    cards[username] = []
    notes[username] = []
    print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

def login():
    global session_user
    username = input("\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    password = input("–ü–∞—Ä–æ–ª—å: ")
    if users.get(username) == password:
        session_user = username
        print(f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
    else:
        print("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

# –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
def add_card():
    question = input("\n–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: ")
    answer = input("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç: ")
    cards[session_user].append({'q': question, 'a': answer})
    print("–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

def review_card():
    user_cards = cards.get(session_user, [])
    if not user_cards:
        print("\n–ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç.")
        return
    card = random.choice(user_cards)
    print("\n–í–æ–ø—Ä–æ—Å:", card['q'])
    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç...")
    print("–û—Ç–≤–µ—Ç:", card['a'])

# –¢–∞–π–º–µ—Ä —Å –ø–æ—Ç–æ–∫–∞–º–∏ 
class InputWithTimeout:
    def __init__(self, prompt, timeout):
        self.prompt = prompt
        self.timeout = timeout
        self.user_input = None
        self.input_received = threading.Event()

    def get_input(self):
        try:
            self.user_input = input(self.prompt)
            self.input_received.set()
        except:
            pass

    def run(self):
        thread = threading.Thread(target=self.get_input)
        thread.daemon = True
        thread.start()
        thread.join(self.timeout)
        if self.input_received.is_set():
            return self.user_input
        else:
            raise TimeoutError

# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
def quiz():
    user_cards = cards.get(session_user, [])
    if not user_cards:
        print("\n–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return
    score = 0
    for i, card in enumerate(random.sample(user_cards, len(user_cards))):
        print(f"\n–í–æ–ø—Ä–æ—Å {i+1}: {card['q']}")
        try:
            answer = InputWithTimeout("–û—Ç–≤–µ—Ç (30 —Å–µ–∫): ", 30).run()
        except TimeoutError:
            print("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
            continue
        if answer.strip().lower() == card['a'].strip().lower():
            print("‚úÖ –í–µ—Ä–Ω–æ!")
            score += 1
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {card['a']}")
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {score}/{len(user_cards)}")

# –ó–∞–º–µ—Ç–∫–∏
def add_note():
    text = input("\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É: ")
    notes[session_user].append(text)
    print("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

def view_notes():
    if not notes[session_user]:
        print("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    for i, note in enumerate(notes[session_user], 1):
        print(f"{i}. {note}")

def delete_note():
    view_notes()
    try:
        idx = int(input("–ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")) - 1
        if 0 <= idx < len(notes[session_user]):
            notes[session_user].pop(idx)
            print("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")

def edit_note():
    view_notes()
    try:
        idx = int(input("–ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")) - 1
        if 0 <= idx < len(notes[session_user]):
            new_text = input("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: ")
            notes[session_user][idx] = new_text
            print("–ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    while True:
        print("""
üìö –ú–µ–Ω—é:
1. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
2. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
3. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
4. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
5. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏
6. –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
7. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
0. –í—ã–π—Ç–∏
        """)
        choice = input("–í—ã–±–æ—Ä: ")
        if choice == '1': add_card()
        elif choice == '2': review_card()
        elif choice == '3': quiz()
        elif choice == '4': add_note()
        elif choice == '5': view_notes()
        elif choice == '6': delete_note()
        elif choice == '7': edit_note()
        elif choice == '0': break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

# –ó–∞–ø—É—Å–∫
def start():
    print("üìò –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StudyApp!")
    while not session_user:
        print("\n1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n2. –í—Ö–æ–¥\n0. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–æ—Ä: ")
        if choice == '1': register()
        elif choice == '2': login()
        elif choice == '0': return
        else: print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    main_menu()

start()
